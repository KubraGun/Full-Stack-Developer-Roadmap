Fetch API:
    - Web tarayıcısının web sunucularına HTTP istekleri atmasına olanak tanır. 
    - fetch(), modern JS'te yerleşik (built-in) bir fonksiyondur.
    - RESTful API'lere GET, POST, 
    - Promise tabanlıdır. Yani async/await ya da .then() kullanılır.
    - Web isteklerini yapmayı ve yanıtlamayı XmlHttpRequest'e göre daha kolay ve temiz hale getirir.
    - async ve await temellidir.

    ______________________________________________________________________________  
    Code 3.
    ______________________________________________________________________________
    fetch(file)
        .then(x => x.test())
        .then(y => myDisplay(y));
    
    // bu kodu async-await ile yazalım - daha kolay anlaşılması için
    async function getText(file) {
        let x = await fetch(file);
        let y = await x.text();
        myDisplay(y);
    }
    ______________________________________________________________________________

    Basit fetch kullanımı:
    ______________________________________________________________________________
    Code 4. (Fetch ile JSON verisi nasıl alınır ve nasıl işlenir?)
    ______________________________________________________________________________
    fetch('https://jsonplaceholder.typicode.com/todos/1')
        .then(response => response.json())
        .then(data => console.log(data));
    ______________________________________________________________________________

    --> Basit GET isteği:
    ______________________________________________________________________________
    Code 5.
    ______________________________________________________________________________
    fetch('https://jsonplaceholder.typicode.com/posts/1')
    .then(response => response.json())
    .then(data => console.log(data))
    .catch(error => console.error("Error:", error));

    // fetch ile url'e istek atılır.
    // gelen veri JSON formatına çevrilir
    // gelen veri işlenir
    // catch ile varsa hata yakalanır
    ______________________________________________________________________________

    Async/await ile:
    ___________________________________________________________________________________________
    Code 6.
    ___________________________________________________________________________________________
    async function getData() {
        try {
            const response = await fetch('https://jsonplaceholder.typicode.com/posts/1');
            const data = await response.json();
            console.log(data);
        } catch (error) {
            console.error("Error:", error);
        }
    }

    getData();

    // daha okunabilir. try catch ile hata yönetimi daha iyi
    __________________________________________________________________________________________

    --> Basit POST isteği
    ___________________________________________________________________________________________
    Code 7.
    ___________________________________________________________________________________________
    async function postData() {
        try {
            const response = await fetch('https://jsonplaceholder.typicode.com/posts', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    title: 'New Post',
                    body: This is a new post',
                    userId: 1
                })
            });

            const data = await response.json();
        }
        catch (error) {
            console.error("Error:", error);
        }
    }

    postData()
    ___________________________________________________________________________________________
    Bu kod bloğunda
        - method parametresiyle HTTP yöntemi belirtilir.
        - header ile içerik türü json formatı olarak belirtilir.
        - body parametresiyle gönderilecek veri json formatında stringe dönüştürülür

    
    --> Bsit PUT isteği
    ___________________________________________________________________________________________
    Code 8.
    ___________________________________________________________________________________________
    asyn function updateData() {
        try {
            const response = await fetch('https://jsonplaceholder.typicode.com/posts/1', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    id: 1,
                    title: 'Update Title',
                    body: 'Updated Content',
                    userId: 1
                })
            });

            const data = await response.json();
            console.log(data);
        }
        catch (error) {
            console.error("Error:", error);
        }
    }

    updateData();
    ___________________________________________________________________________________________


    --> Basit DELETE isteği
    ___________________________________________________________________________________________
    Code 9.
    ___________________________________________________________________________________________
    async function deleteData() {
        try {
            const response = await fetch('https://jsonplaceholder.typicode.com/posts/1', {
                method: 'DELETE',
            });

            console.log('Deleted: ', response.status) // 200 veya 204

        } catch (error) {
            console.error("Error:", error);
        }
        
    }

    deleteData();
    ___________________________________________________________________________________________

    --> Fetch API ile hata yönetimi
    ___________________________________________________________________________________________
    Code 10. Response durumunu kontrol etmek (async/await ile hata yakalama)
    ___________________________________________________________________________________________
    async function fetchData() {
        try {
            const response = await fetch('https://jsonplaceholder.typicode.com/posts/1');

            if(!response.ok) // ok özelliği isteğin başarılı olup olmadığını kontrol eder
            {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = wait response.json();
            console.log(data);
        }
        catch (error) {
            console.error("Error:", error);
        }
    }

    fetxhData();
    ___________________________________________________________________________________________


    --> Fetch ile TimeOut İşlemi: fetch() fonksiyonunda TimeOut özelliği olmadığı için AbortController ile sağlanır.
    ___________________________________________________________________________________________
    Code 11. (Timeout nasıl uygulanır?)
    ___________________________________________________________________________________________
    async function fetchWithTimeout(url, timeout=5000) {
        const controller = new AbortController(); // controller nesnesi oluşturulur
        const timer = setTimeout(() => controller.abort(), timeout);

        try {
            const response = await fetch(url, {
                signal: controller.signal
            });

            clearTimeout(timer);

            if(!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            console.log(data);
        } catch {
            console.error("Timeout error!");
        }
    }

    fetchWithTimeout('https://jsonplaceholder.typicode.com/posts/1);
    // AbortController ile fetch itekleri manuel olarak iptal edilebilir.
    ______________________________________________________________________________________________


    ## ÖRNEKLER :
        1- Bir kullanıcı profili görüntüleme uygulaması geliştiriliyor olsun. Kullanıcı ID'si verilen bir API'den veri çekilmesi gerekiyor. Ancak API zaman zaman veri döndürmüyor ve 404 hatası verebiliyor.
        fetch() kullanılarak veri çekimi yapılsın ve hata durumunda "User not found" mesajı gösterilsin.
        --> fetch ile get isteği yapılmalı
        --> 404 hatası kontrol edilmeli
        --> Başarılı yanıtta kullanıcı adı yazdırılmalı.
       ___________________________________________________________________________________________
       Code 12.
       ___________________________________________________________________________________________
       async function getUser(userId) {
        try {
            const response = await fetch(`https://jsonplaceholder.typicode.com/users/${userId}`);

            if (!response.ok) {
                if (response.status === 404) {
                    throw new Error('User not found.');
                } else {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const user = awit response.json();
                console.log(user.name);
            }
        } catch {
            console.error(error.message);
        }
       }

       getUser(1);
       getUser(1000);
       ______________________________________________________________________________________________

        2- Bir formdan gelen kullanıcı verisinin API'ye POST isteği ile gönderilmesi gerek. API gönderilen veriyi başarıyla eklediğinde 201 kodu yanıt olarak döner. Ancak kullanıcının hatalı bilgi gönderilmesi
        durumunda API 400 kodu yanıt olarak döner. Hatalar kullanıcıya bildirilecek.
            --> POSt isteği fetch ile gönderilecek.
            --> 201 ve 400 kodları kontrol edilecek.
            --> Başarılı yanıtta kullanıcıya "User created successfully" mesajı gösterilecek.

          __________________________________________________________________________________________
          Code 13.
          __________________________________________________________________________________________
          aysnc function createUser(userData) {
            try {
                const response = await fetch(https://jsonplaceholder.typicode.com/users, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(userData),
                });

                if (responsestatus === 201) {

                } else if (response.status === 400) {
                    throw new Error('Invalid data provided');
                } else {
                    throw new Error(error.message);
                }
            } catch (error) {
                console.Error(error.message);
            }
          }
          
          createUser({name: 'Alice',, email: 'alice@example.com'});
          ____________________________________________________________________________________________

        3- Bir kullanıcı listesi API'den çekilecek. Her kullanıcı için ayrıca detay bilgisi (adres, telefon vs) ayrı bir API isteği ile çekilecek. Tüm istekler aynı anda yapılmalı ve en son hepsi başarıyla 
           döndüğünde sonuçlar işlenmeli.
           --> Promise.all ile paralel istek yapılmalı
           --> Veriler toplu olarak işlenmeli
           ____________________________________________________________________________________________
           Code 14.
           ____________________________________________________________________________________________
           async function fetchUserDetails(userIds) {
            try {
                const fetches = userIds.map( id =>
                    fetch(`https://jsonplaceholder.typicode.com/users/${id}`)
                        .then(res => res.json())
                );

                const user = await Promise.all(fetches);
                users.forEach(user => console.log(user.name));
            } catch (error) {
                console.Error("Error fetching user details: ", error.message);
            }
           }

           fetchUserDetails([1, 2, 3]);
           ____________________________________________________________________________________________


        4- TimeOut mekanizmasıyla fetch
            API'den veri çekerken, 5 saniye içinde yanıt dönmezse istek iptal edilsin ve "Request Timeout" mesajı gösterilsin.
             --> AbortController ile Timeout uygulanmalı
                ___________________________________________________________________________________________
                Code 15.
                ____________________________________________________________________________________________
                async function fetchWithTimeout(url, timeout=5000) {
                    const controller = new AbortController();
                    const timer = setTimeout(() => controller.abort(), timeout);

                    try {
                        const response = await fetch(url, { signal: controller.signal });
                        clearTimeout(timer);

                        if (!response.ok) {
                            throw new Error('Request failed with status ' + response.status);
                        }

                        const data = await response.json();
                        console.log(data);
                                            
                    } catch (error) {
                        console.error(error.message);
                    }
                }

                fetchWithTimeout('https://jsonplaceholder.typicode.com/posts/1');
                ____________________________________________________________________________________________
        
        5- Retry mekanizması
           API isteği başarısız olursa (500 ve üzeri hata kodlarında) 3 defaya kadar otomatik olarak tekrar denensin
            --> for döngüsü ile istek tekrar denensin
            --> Başarısız olursa hata verilecek.

            _________________________________________________________________________________________________
            Code 16.
            _________________________________________________________________________________________________
            async function fetchWithRetry(url, retries = 3) {
                for (let attempt = 1; attempt <= retries; attempt++) {
                    try {
                        const response = await fetch(url);

                        if (!response.ok) {
                            throw new Error(`HTTP Error: ${response.status}`);
                        }

                        const data = await response.json();
                        console.log(data);
                        return;
                    } catch (error) {
                        console.error(`Attempt ${attempt} failed: ${error.message}`);
                        if (attempt === retries) {
                            console.error("Max retries reached. Operation failed.")
                        }

                    }
                }
            }
            fetchWithRetry('https://jsonplaceholder.typicode.com/posts/1');
            _____________________________________________________________________________________________________


        6- Dinamik API istekleriyle koşullu fetch()
           Bir e-ticaret sitesinde kullanıcının seçimine göre farklı API'lere istek atılacak. Kullanıcı elektronik kategorisini seçerse /products/electronics API'sine, giyim kategorisini seçerse /product/clothing API'sine
           istek atılacak. Yanlış seçim yapılırsa özel hata fırlatılacak
           --> Dinamik URL yapısı kurulacak
           --> Geçersiz seçimlrde özel hata mesajı 
           --> Başarılı sonuçlarda ürün isimleri ekrana yazdırılacak

           ______________________________________________________________________________________________________
           Code 17.
           ______________________________________________________________________________________________________
           async function fetchCategoryProducts(category) {
            const validateCategories = ['electronics', 'clothing'];

            if (!validateCategories.includes(category)) {
                throw new Error('Invalid category selected!');
            }

            try {
                const response await fetch(`https://fakestoreapi.com/products/category/${category}`);

                if (!response.ok) {
                    throw new Error(`Failed to fetch products for ${category}`);
                }

                const products = await response.json();
                products.forEach(product => console.log(product.title));
            } catch (error) {
                console.error('Error: ', error.message);
            }
           }

           fetchCategoryProducts('electronics');
           fetchCategoryProducts('invalid');
           _________________________________________________________________________________________________________

        7- Sequential Fetch ve sonuçların bağımlı işlenmesi
           Önce kullanıcı verisi çekilecek. Sonra kullanıcıya ait siparişler çekilecek. Siparişlerin de detayları çekilip toplam tutar yazılacak. 
           --> İstekler sırayla yapılacak
           --> Her adım bir önceki adımın sonucuna bağlı olacak
           
           __________________________________________________________________________________________________________
           Code 18.
           __________________________________________________________________________________________________________
           async function fetchUserOrderTotal(userId) {
            try {
                const userResponse = await fetch(`https://fakestoreapi.com/users/${user.id});
                if (!userResponse.ok) throw new Error('User not found');
                const user = await userResponse.json();

                const ordersResponse = await fetch(`https://fakestoreapi.com/carts/user/`${user.id}`);
                if (!ordersResponse.ok) throw new Error('Orders not found.');
                const orders = await ordersResponse.json();

                let total = 0;
                for (const order of orders) {
                    for (const item of order.products) {
                        const productResponse = await fetch(`https://fakestoreapi.com/products/${item.productId}`);
                        const product = await productResponse.json();
                        total += product.price * item.quantity;
                    }
                }

                console.log(`Total order amount: $${total}`);
            } catch (error) {
                console.error('Error: ', error.message);
            }
           }
           fetchUserOrderTotal(1);
           _________________________________________________________________________________________________________

        8- Dinamik Retry + Timeout + Exponential Backoff mekanizması
           API yanıt vermediğinde, istek 3 kez art arda gecikmeli olarak tekrar denenecek (1s, 2s, 4s gecikme). Eğer hala yanıt gelmezse "Request Failed" mesajı gösterilecek.
           __________________________________________________________________________________________________________
           Code 19.
           __________________________________________________________________________________________________________
           async gunction fetchWithRetry(url, retries = 3, delay = 1000) {
            for (let attempt = 0; attempt < retries; attempt++) {
                try {
                    const controller = new AbortController();
                    const timeout = setTimeout(() => controller.abort(), delay * attempt);

                    const response = await fetch(url, { signal: controller.signal });
                    clearTimeout(timeout);

                    if (!response.ok) {
                        throw new Error(`HTTP Error: ${response.status}`);
                    }

                    const data = await response.json();
                    console.log(data);
                    return;

                } cathch (error) {
                    console.error(`Attempt ${attempt} failed:`, error.message);
                    if (attempt === retries) {
                        console.error('Request Failed after maximum retries.');
                    } else {
                        await new Promise(res => setTimeout(res, delay * attempt));
                    }
                }
            }
           }
           fetchWithRetry('https://jsonplaceholder.typicode.com/posts/1');
           _________________________________________________________________________________________________________

        9- Paralel istekler + İptal Etme (AbortController)
           Kullanıcı arama kutusuna yazı yazarken, her harf girdisinde yeni bir API isteği yapılacak.
            --> Bir önceki istek iptal edilmeli
            --> Sadece son istekten dönen veri işlenmeli.
            __________________________________________________________________________________________________________
            Code 20.
            __________________________________________________________________________________________________________
            let controller;
            
            asyn function searchProducts(query) {
                if (controller) controller.abort();
                controller = new AbortController();

                try {
                    const response = await fetch(`https://fakestoreapi.com/products?q=${query}`, {
                        signal: controller.signal
                    });

                    if (!response.ok) throw new Error('Search Failed');

                    const results = await response.json();
                    console.log('Search results: ', results);
                } catch (error) {
                    if (error.name === 'AbortError') console.warn('Previous search aborted.');
                    else console.error('Error:', error.message);
                }
            }

            searchProducts('Laptop');
            searchProducts('Laptop Pro');
            _________________________________________________________________________________________________________
        
        10- Caching + Stale data
            API'den gelen veriler localStorage'a cache'lenmeli. İlk istek localStorage'dan yapılacak. API'den yeni veri gelirse cache güncellenip kullanıcıya en güncel veri gösterilecek.

            ____________________________________________________________________________________________________________
            Code 21.
            ____________________________________________________________________________________________________________
            async function fetchWithCache(url) {
                const cacheKey = `cache_${url}`;
                const cachedData = localStorage.getItem(cacheKey);

                if (cachedData) console.log()

            }
            ____________________________________________________________________________________________________________
        
